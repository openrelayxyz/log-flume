Description: A  pool of flume servers for Ether Cattle

Parameters:
  FlumeDiskSize:
    Default: '250'
    Description: Size of each node's chaindata storage volume in GiB
    MaxValue: '1024'
    MinValue: '8'
    Type: Number
  FlumeImageAMI:
    Default: ""
    Description: Custom AMI to use for the flume servers, empty string for default AWS AMI image
    Type: String
  S3FlumeBackup:
    Default: flume-stage-db/mainnet/logs-20200216.sqlite.lz4
    Type: String
    Description: "The backup bucket with path for the current backup. Do not include s3:// as that is provided in code"
  S3FlumeBackupBucket:
    Default: flume-stage-db
    Type: String
    Description: The bucket for Flume to store backups in
  S3FlumeBinaryDirectory:
    Default: flume/kafka-feeds-1
    Type: String
    Description: The bucket containing Flume Binaries
  S3ECBucketName:
    Default: ethercattle-binaries
    Type: String
    Description: The bucket containing EtherCattle Binaries
  InfrastructureStack:
    Type: String
    Description: The infrastructure stack this cluster connects to
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of the SSH key pair allowed to SSH into the nodes
  NetworkId:
    Type: String
    Description: An identifier for the network this cluster represents. This should be common across all clusters representing the same network. (this is a subdirectory backups/snapshots will be stored)
  FlumeSyncEndpoint:
    Default: ws://localhost:5654
    Type: String
    Description: Endpoint Flume connects to do sync with kafka:// or ws:// or wss:// endpoints accepted.
  FlumeTargetCapacity:
    Type: Number
    Default: 2
    Description: Minimum number of instances for flume
  FlumeMaxCapacity:
    Type: Number
    Default: 5
    Description: Maximum number of instances for flume
  FlumeOnDemandPercentage:
    Type: Number
    Default: 0
    Description: The percentage (0 - 100) of flume that should be on-demand instead of spot instances.
  FlumeCPUScalingTargetValue:
    Type: Number
    Default: 80
    Description: The percentage (0 - 100) CPU utilization target for auto scaling flume
  FlumeSize:
    Type: String
    Description: Whether to use full size flume or smaller ones. "full" will use a pool of large instances from the m5d, m5ad, r5d, and r5ad families. "small" will use a pool of medium instances from the t3 and t3a families. Use "small" if you expect a small request volume.
    AllowedValues:
      - full
      - small
    Default: full
  FlumeAlternateTargetGroup:
    Type: String
    Description: An alternative comma-separated list of target groups that flume should be assigned to.
  NotificationEmail:
    Type: String
    Description: An optional e-mail address to receive notifications from alarms
  AlarmSNSTopic:
    Type: String
    Description: An optional SNS topic to receive notifications from alarms
  FlumeExtraSecurityGroup:
    Type: String
    Description: An additional security to be assigned to Flumes. Leave this blank unless you need to add additional connectivity rules.
  FlumeSnapshotScheduleExpression:
    Type: String
    Description: A schedule expression for the frequency to take snapshots
    Default: "cron(55 4 * * ? *)"
  FlumeSpotAllocationStrategy:
    Type: String
    AllowedValues:
      - "lowest-price"
      - "capacity-optimized"
    Default: "capacity-optimized"


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Infrastructure
        Parameters:
          - InfrastructureStack
          - FlumeAlternateTargetGroup
          - AlarmSNSTopic
          - NotificationEmail
          - KeyName
          - FlumeSnapshotScheduleExpression
      - Label:
          default: Cluster
        Parameters:
          - NetworkId
          - S3FlumeBackup

      - Label:
          default: Flume
        Parameters:
          - FlumeDiskSize
          - FlumeSize
          - FlumeImageAMI
          - FlumeSyncEndpoint
          - FlumeTargetCapacity
          - FlumeMaxCapacity
          - FlumeOnDemandPercentage
          - SnapshotValidationThreshold
          - FlumeExtraSecurityGroup
          - FlumeSpotAllocationStrategy
      - Label:
          default: Fallback
        Parameters:
          - FallbackTargetCapacity
          - FallbackMaxCapacity
    ParameterLabels:
      FlumeDiskSize:
        default: Disk Size
      FlumeImageAMI:
        default: Flume AMI Image
      S3FlumeBackup:
        default: S3 Flume Backup
      S3ECBucketName:
        default: S3 EtherCattle Bucket
      InfrastructureStack:
        default: Infrastructure CloudFormation Stack
      KeyName:
        default: SSH Key Pair
      NetworkId:
        default: Unique Network ID
      FlumeSyncEndpoint:
        default: Flume Sync Endpoint
      FlumeTargetCapacity:
        default: Target Capacity
      FlumeOnDemandPercentage:
        default: On-Demand Percentage
      FlumeExtraSecurityGroup:
        default: Flume Extra Security Group
      FlumeAlternateTargetGroup:
        default: Alternate Target Group
      NotificationEmail:
        default: Notification Email Address
      AlarmSNSTopic:
        default: SNS Topic for Alarms
      SnapshotValidationThreshold:
        default: Snapshot Validation Threshold
      FlumeSnapshotScheduleExpression:
        default: Snapshot Schedule Expression

Mappings:
  InstanceSizes:
    Flume:
      full:
        - InstanceType: i3en.large
        - InstanceType: m5.xlarge
        - InstanceType: m5a.xlarge
        - InstanceType: m5ad.xlarge
        - InstanceType: m5d.xlarge
        - InstanceType: r5.large
        - InstanceType: r5a.large
        - InstanceType: r5ad.large
        - InstanceType: r5d.large
      small:
        - InstanceType: t3.medium
        - InstanceType: t3a.medium
  PoolSize:
    Size:
      full: 11
      small: 6
  RegionMap:
    us-west-1:
      AL2AMI: ami-056ee704806822732
    eu-central-1:
      AL2AMI: ami-0cc293023f983ed53
    cn-north-1:
      AL2AMI: ami-0cad3dea07a7c36f9
    us-east-1:
      AL2AMI: ami-0b898040803850657
    ap-northeast-2:
      AL2AMI: ami-095ca789e0549777d
    us-gov-west1:
      AL2AMI:  ami-6b157f0a
    sa-east-1:
      AL2AMI: ami-058943e7d9b9cabfb
    ap-northeast-3:
      AL2AMI: ami-088d713d672ed235e
    ap-northeast-1:
      AL2AMI: ami-0c3fd0f5d33134a76
    ap-southeast-1:
      AL2AMI: ami-01f7527546b557442
    us-east-2:
      AL2AMI: ami-0d8f6eb4f641ef691
    ap-southeast-2:
      AL2AMI: ami-0dc96254d5535925f
    cn-northwest-1:
      AL2AMI: ami-094b7433620966eb5
    eu-west-1:
      AL2AMI: ami-0bbc25e23a7640b9b
    eu-north-1:
      AL2AMI: ami-d16fe6af
    us-gov-east1:
      AL2AMI: ami-1208ee63
    ap-south-1:
      AL2AMI: ami-0d2692b6acea72ee6
    eu-west-3:
      AL2AMI: ami-0adcddd3324248c4c
    eu-west-2:
      AL2AMI: ami-0d8e27447ec2c8410
    ca-central-1:
      AL2AMI: ami-0d4ae09ec9361d8ac
    us-west-2:
      AL2AMI: ami-082b5a644766e0e6f

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasATG: !Not [!Equals [!Ref FlumeAlternateTargetGroup, '']]
  HasNotificationEmail: !Not [!Equals [ !Ref NotificationEmail, "" ]]
  HasSNSTopic: !Not [!Equals [ !Ref AlarmSNSTopic, "" ]]
  HasFlumeImageAMI: !Not [!Equals [ !Ref FlumeImageAMI, "" ]]
  HasExtraSecurityGroup: !Not [!Equals [ !Ref FlumeExtraSecurityGroup, "" ]]
  SmallFlume: !Equals [ !Ref FlumeSize, "small"]
  FlumeSpotLowestPrice: !Equals [!Ref FlumeSpotAllocationStrategy, "lowest-price"]

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  MulMin:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          var response = require('./cfn-response');
          exports.handler = function(event, context) {
            var result = parseInt(event.ResourceProperties.Op1) * parseInt(event.ResourceProperties.Op2);
            if(event.ResourceProperties.Max) {
              result = Math.min(result, parseInt(event.ResourceProperties.Max));
            }
            response.send(event, context, response.SUCCESS, {Value: result});
          };
      Runtime: nodejs12.x
  Max:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          var response = require('./cfn-response');
          exports.handler = function(event, context) {
            var result = Math.max(parseInt(event.ResourceProperties.Op1), parseInt(event.ResourceProperties.Op2));
            response.send(event, context, response.SUCCESS, {Value: result});
          };
      Runtime: nodejs12.x
  HDDSize:
    Type: Custom::Max
    Properties:
      ServiceToken: !GetAtt Max.Arn
      Op1: !Ref FlumeDiskSize
      Op2: 500
  VolumeIOPS:
    Type: Custom::MulMin
    Properties:
      ServiceToken: !GetAtt MulMin.Arn
      Op1: !Ref FlumeDiskSize
      Op2: 50
      Max: 5000

  AggregatedNotifications:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Aggregated Notifications
  AggregatedNotificationsSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasNotificationEmail
    Properties:
      Endpoint: !Ref NotificationEmail
      Protocol: email
      TopicArn: !Ref AggregatedNotifications
  FlumeCPUSNS:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Flume CPU
  FlumeDiskSNS:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Flume Disk

  FlumeDiskAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref FlumeDiskSNS
        - !Ref AggregatedNotifications
        - !If [ HasSNSTopic, !Ref AlarmSNSTopic,  !Ref 'AWS::NoValue']
      AlarmDescription: "Alarms when the overlay data directory > 95% full"
      ComparisonOperator: "GreaterThanThreshold"
      Metrics:
        - Id: nvme
          MetricStat:
            Metric:
              MetricName: "disk_used_percent"
              Namespace: CWAgent
              Dimensions:
                - Name: AutoScalingGroupName
                  Value : !Ref FlumeAutoScalingGroup
                - Name: device
                  Value : "nvme2n1"
                - Name: fstype
                  Value : "ext4"
                - Name: path
                  Value : "/var/lib/flume"
            Period: 60
            Stat: Maximum
          Label: NVME Flume Disk Usage
          ReturnData: false
        - Id: ebs
          MetricStat:
            Metric:
              MetricName: "disk_used_percent"
              Namespace: CWAgent
              Dimensions:
                - Name: AutoScalingGroupName
                  Value : !Ref FlumeAutoScalingGroup
                - Name: device
                  Value : "nvme1n1"
                - Name: fstype
                  Value : "ext4"
                - Name: path
                  Value : "/var/lib/flume"
            Period: 60
            Stat: Maximum
          Label: EBS Flume Disk Usage
          ReturnData: false
        - Id: delta
          Expression: "(ebs + nvme)"
      InsufficientDataActions:
        - !Ref FlumeDiskSNS
        - !Ref AggregatedNotifications
        - !If [ HasSNSTopic, !Ref AlarmSNSTopic,  !Ref 'AWS::NoValue']
      EvaluationPeriods: 5
      OKActions:
        - !Ref FlumeDiskSNS
        - !Ref AggregatedNotifications
        - !If [ HasSNSTopic, !Ref AlarmSNSTopic,  !Ref 'AWS::NoValue']
      Threshold: 95
      TreatMissingData: missing
  FlumesCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref FlumeCPUSNS
        - !Ref AggregatedNotifications
        - !If [ HasSNSTopic, !Ref AlarmSNSTopic,  !Ref 'AWS::NoValue']
      AlarmDescription: "Alarms when the flume CPU > 80%"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: AutoScalingGroupName
          Value : !Ref FlumeAutoScalingGroup
      InsufficientDataActions:
        - !Ref FlumeCPUSNS
        - !Ref AggregatedNotifications
        - !If [ HasSNSTopic, !Ref AlarmSNSTopic,  !Ref 'AWS::NoValue']
      EvaluationPeriods: 10
      DatapointsToAlarm: 7
      MetricName: "CPUUtilization"
      Namespace: AWS/EC2
      OKActions:
        - !Ref FlumeCPUSNS
        - !Ref AggregatedNotifications
        - !If [ HasSNSTopic, !Ref AlarmSNSTopic,  !Ref 'AWS::NoValue']
      Period: 60
      Statistic: Maximum
      Threshold: 80
      TreatMissingData: missing
  MetricsConfigParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Type: String
      Value: '{"metrics":{"append_dimensions":{"AutoScalingGroupName":"${aws:AutoScalingGroupName}"},"metrics_collected":{"cpu":{"measurement":["cpu_usage_idle","cpu_usage_user","cpu_usage_system"],"metrics_collection_interval":60,"resources":["*"],"totalcpu":false},"disk":{"measurement":["used_percent","inodes_free"],"metrics_collection_interval":60,"resources":["/var/lib/flume","/var/lib/flume/overlay","/"]},"diskio":{"measurement":["io_time"],"metrics_collection_interval":60,"resources":["/var/lib/flume","/var/lib/flume/overlay","/"]},"mem":{"measurement":["mem_used_percent"],"metrics_collection_interval":60},"statsd":{"metrics_aggregation_interval":60,"metrics_collection_interval":10,"service_address":":8125"},"swap":{"measurement":["swap_used_percent"],"metrics_collection_interval":60}}}}'

  FlumeLG:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName:
        "Fn::Sub":
          - "/${ClusterId}/${AWS::StackName}/flume"
          - ClusterId:
              "Fn::ImportValue": !Sub "${InfrastructureStack}-ClusterId"
  FlumeNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow internal SSH access and VPC access to RPC
      VpcId:
        "Fn::ImportValue": !Sub "${InfrastructureStack}-VpcId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Join ["", ["Fn::ImportValue": !Sub "${InfrastructureStack}-VpcBaseIp", ".0.0/16"]]
      - IpProtocol: tcp
        FromPort: '8000'
        ToPort: '8000'
        CidrIp: !Join ["", ["Fn::ImportValue": !Sub "${InfrastructureStack}-VpcBaseIp", ".0.0/16"]]
  FlumeNodeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - autoscaling.amazonaws.com
        Version: '2012-10-17'
  FlumeNodePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref FlumeNodeRole
      PolicyName: !Sub "FlumeNode${AWS::StackName}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
            Sid: Stmt3
          - Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:GetBucketPolicy
              - s3:GetObjectTagging
              - s3:GetBucketLocation
            Resource: !Sub arn:aws:s3:::${S3FlumeBackupBucket}/*
            Effect: Allow
          - Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:GetBucketPolicy
              - s3:GetObjectTagging
              - s3:GetBucketLocation
            Resource: !Sub arn:aws:s3:::${S3FlumeBackup}
            Effect: Allow
          - Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:GetBucketPolicy
              - s3:GetObjectTagging
              - s3:GetBucketLocation
            Resource: !Sub arn:aws:s3:::${S3ECBucketName}/*
            Effect: Allow
          - Action:
              - cloudwatch:PutMetricData
              - ec2:DescribeTags
              - logs:PutLogEvents
              - logs:DescribeLogStreams
              - logs:DescribeLogGroups
              - logs:CreateLogStream
              - logs:CreateLogGroup
            Resource: "*"
            Effect: Allow
          - Action:
              - ssm:GetParameter
            Resource: !Sub "arn:aws:ssm:*:*:parameter/${MetricsConfigParameter}"
            Effect: Allow
          - Action:
              - sns:Publish
            Resource:
              - !Ref AggregatedNotifications
              - !If [ HasSNSTopic, !Ref AlarmSNSTopic,  !Ref 'AWS::NoValue']
            Effect: Allow
          - Action:
              - ec2:ModifyVolume
              - ec2:DescribeVolumes
            Effect: Allow
            Resource: "*"
  FlumeNodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
      - !Ref FlumeNodeRole
    DependsOn: FlumeNodeRole
  FlumeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !If [HasFlumeImageAMI, !Ref FlumeImageAMI, !FindInMap [RegionMap, !Ref "AWS::Region", AL2AMI]]
        InstanceType: m5ad.large
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${AWS::StackName}-Flume"
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub "${AWS::StackName}-Flume"
        SecurityGroupIds:
          - !Sub ${FlumeNodeSecurityGroup.GroupId}
          - !If [HasExtraSecurityGroup, !Ref FlumeExtraSecurityGroup, !Ref 'AWS::NoValue']
        IamInstanceProfile:
          Name: !Ref FlumeNodeInstanceProfile
        KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
        CreditSpecification: !If [SmallFlume, {CpuCredits: standard}, !Ref 'AWS::NoValue']
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
        BlockDeviceMappings:
        - DeviceName: "/dev/sdf"
          Ebs:
            VolumeSize: !Ref FlumeDiskSize
            VolumeType: io1
            Iops: !GetAtt VolumeIOPS.Value
            # SnapshotId: !Ref SnapshotId

        UserData:
          "Fn::Base64":
            "Fn::Sub":
              - |
                #!/bin/bash -xe
                if [ "$(arch)" == "x86_64" ]
                then
                  ARCH="amd64"
                elif [ "$(arch)" == "aarch64" ]
                then
                  ARCH="arm64"
                fi
                useradd -r flume
                LOGS_BIN="journald-cloudwatch-logs-$ARCH"
                aws s3 cp s3://${S3ECBucketName}/$LOGS_BIN /usr/local/bin/journald-cloudwatch-logs
                chmod +x /usr/local/bin/journald-cloudwatch-logs
                mkdir -p /var/lib/journald-cloudwatch-logs/
                yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/$ARCH/latest/amazon-cloudwatch-agent.rpm jq
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${MetricsConfigParameter} -s

                printf "[Unit]\nDescription=journald-cloudwatch-logs\nWants=basic.target\nAfter=basic.target network.target\n\n[Service]\nExecStart=/usr/local/bin/journald-cloudwatch-logs /usr/local/etc/journald-cloudwatch-logs.conf\nKillMode=process\nRestart=on-failure\nRestartSec=42s" > /etc/systemd/system/journald-cloudwatch-logs.service

                printf "log_group = \"${FlumeLG}\"\nstate_file = \"/var/lib/journald-cloudwatch-logs/state\"" > /usr/local/etc/journald-cloudwatch-logs.conf
                mkdir -p /var/lib/flume
                export AWS_DEFAULT_REGION=${AWS::Region}
                if [ -e /dev/sdf ]
                then
                  mkfs.ext4 /dev/sdf
                  mount -o barrier=0,data=writeback /dev/sdf /var/lib/flume
                  echo "/dev/sdf  /var/lib/flume    ext4   barrier=0,data=writeback,noatime  1   1" >> /etc/fstab
                fi

                # Disable NVME logic for now
                # ignore="$(readlink -f /dev/sd*) $(readlink -f /dev/xvd*)"
                # cutignore="$(for x in $ignore ; do echo $x | cut -c -12; done | uniq)"
                # devices="$(ls /dev/nvme* | grep -E 'n1$')"
                # cutdevices="$(for x in $devices ; do echo $x | cut -c -12; done | uniq)"
                # localnvme=$(for d in $cutdevices; do if ! $(echo "$cutignore"| grep -q $d) ; then echo $d; fi ; done)
                # if [ ! -z "$localnvme" ]
                # then
                #   mkfs.ext4 $localnvme
                #   mount -o barrier=0,data=writeback $localnvme /var/lib/flume
                #   echo "$localnvme  /var/lib/flume    ext4   barrier=0,data=writeback,noatime  1   1" >> /etc/fstab
                # fi

                #Copy Down flumeserver
                if ! aws s3 cp s3://${S3ECBucketName}/${S3FlumeBinaryDirectory}/flumeserver /usr/bin/flumeserver
                then
                  if [ "${AggregatedNotifications}" != "" ]
                    then
                    aws sns publish --topic-arn=${AggregatedNotifications} --subject="${AWS::StackName} - CRITICAL Failure to pull binary" --message="Flume failed to pull down the binary for cluster '${AWS::StackName}'. Correct permssions/upload as soon as possible."
                  fi
                  if [ "${AlarmSNSTopic}" != "" ]
                    then
                    aws sns publish --topic-arn=${AlarmSNSTopic} --subject="${AWS::StackName} - CRITICAL Failure to pull binary" --message="Flume failed to pull down the binary for cluster '${AWS::StackName}'. Correct permssions/upload as soon as possible."
                  fi
                  poweroff
                fi
                chmod +x /usr/bin/flumeserver

                #copy down the flume backup
                if ! aws s3 cp s3://${S3FlumeBackup} - | lz4  -d - /var/lib/flume/item.sqlite
                then
                  if [ "${AggregatedNotifications}" != "" ]
                    then
                    aws sns publish --topic-arn=${AggregatedNotifications} --subject="${AWS::StackName} - CRITICAL Failure to pull backup" --message="Flume failed to pull down the database backup for cluster '${AWS::StackName}'. Correct permssions/upload as soon as possible."
                  fi
                  if [ "${AlarmSNSTopic}" != "" ]
                    then
                    aws sns publish --topic-arn=${AlarmSNSTopic} --subject="${AWS::StackName} - CRITICAL Failure to pull backup" --message="Flume failed to pull down the database backup for cluster '${AWS::StackName}'. Correct permssions/upload as soon as possible."
                  fi
                  poweroff
                fi

                printf "[Unit]
                Description=Flume getlogs go client
                After=syslog.target network.target
                [Service]
                User=flume
                Group=flume
                Environment=HOME=/var/lib/flume
                Type=simple
                LimitNOFILE=655360
                ExecStart=/usr/bin/flumeserver /var/lib/flume/item.sqlite \"${FlumeSyncEndpoint}\"
                CPUSchedulingPolicy=fifo
                CPUSchedulingPriority=20
                KillMode=process
                KillSignal=SIGINT
                TimeoutStopSec=90
                Restart=on-failure
                TimeoutStartSec=86400
                RestartSec=10s
                [Install]
                WantedBy=multi-user.target
                " > /etc/systemd/system/flume.service

                echo "flume        hard nofile 500000" >> /etc/security/limits.conf
                echo "flume        soft nofile 500000" >> /etc/security/limits.conf
                sysctl -w fs.file-max=12000500
                sysctl -w fs.nr_open=20000500
                chown -R flume /var/lib/flume
                # Set the maximum number of open file descriptors
                ulimit -n 20000000

                # Set the memory size for TCP with minimum, default and maximum thresholds
                sysctl -w net.ipv4.tcp_mem='10000000 10000000 10000000'

                # Set the receive buffer for each TCP connection with minumum, default and maximum thresholds
                sysctl -w net.ipv4.tcp_rmem='1024 4096 16384'

                # Set the TCP send buffer space with minumum, default and maximum thresholds
                sysctl -w net.ipv4.tcp_wmem='1024 4096 16384'

                # The maximum socket receive buffer sizemem_max=16384
                sysctl -w net.core.rmem_max=16384

                # The maximum socket send buffer size
                sysctl -w net.core.wmem_max=16384

                sysctl -w vm.swappiness=0
                systemctl daemon-reload
                systemctl enable flume.service
                systemctl enable amazon-cloudwatch-agent.service
                systemctl start amazon-cloudwatch-agent.service
                systemctl enable journald-cloudwatch-logs
                systemctl start journald-cloudwatch-logs
                systemctl start flume.service

                sleep 300
                VOLUME_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values="$(curl http://169.254.169.254/latest/meta-data/instance-id)" | jq '.Volumes[] | select(. | .Attachments[0].Device == "/dev/sdf") | .VolumeId' -cr)
                aws ec2 modify-volume --volume-id $VOLUME_ID --volume-type gp2 &
              - ClusterId:
                  "Fn::ImportValue": !Sub "${InfrastructureStack}-ClusterId"
                BaseInfrastructure:
                  "Fn::ImportValue": !Sub "${InfrastructureStack}-BaseInfrastructure"
  FlumeAutoScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      # AdjustmentType: String
      AutoScalingGroupName: !Ref FlumeAutoScalingGroup
      # Cooldown: 900
      EstimatedInstanceWarmup: 900
      # MetricAggregationType: String
      # MinAdjustmentMagnitude: Integer
      PolicyType: TargetTrackingScaling
      # ScalingAdjustment: Integer
      # StepAdjustments:
      #   - StepAdjustment
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref FlumeCPUScalingTargetValue
  FlumeAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - "Fn::ImportValue":
            !Sub "${InfrastructureStack}-PublicA"
        - "Fn::ImportValue":
            !Sub "${InfrastructureStack}-PublicB"
        - "Fn::ImportValue":
            !Sub "${InfrastructureStack}-PublicC"
      MixedInstancesPolicy:
        InstancesDistribution:
          SpotAllocationStrategy: !Ref FlumeSpotAllocationStrategy
          OnDemandPercentageAboveBaseCapacity: !Ref FlumeOnDemandPercentage
          SpotInstancePools: !If [ FlumeSpotLowestPrice, !FindInMap [PoolSize, Size, !Ref FlumeSize], !Ref "AWS::NoValue"]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref FlumeLaunchTemplate
            Version: !Sub ${FlumeLaunchTemplate.LatestVersionNumber}
          Overrides: !FindInMap [InstanceSizes, Flume, !Ref FlumeSize]
      MinSize: !Ref FlumeTargetCapacity
      MaxSize: !Ref FlumeMaxCapacity
      HealthCheckType: EC2
      TargetGroupARNs: !Split [ ",", !If [HasATG, !Ref FlumeAlternateTargetGroup, {"Fn::ImportValue": !Sub "${InfrastructureStack}-ALBGroupList"}]]
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupInServiceInstances
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Flume
        PropagateAtLaunch: 'true'
  FlumeSnapshotLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !If [HasFlumeImageAMI, !Ref FlumeImageAMI, !FindInMap [RegionMap, !Ref "AWS::Region", AL2AMI]]
        InstanceType: i3en.large
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${AWS::StackName}-FlumeSnapshot"
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub "${AWS::StackName}-FlumeSnapshot"
        SecurityGroupIds:
          - !Sub ${FlumeNodeSecurityGroup.GroupId}
        IamInstanceProfile:
          Name: !Ref FlumeSnapshotNodeInstanceProfile
        KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
        # CreditSpecification:
        #   CpuCredits: standard
        InstanceInitiatedShutdownBehavior: terminate
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
        BlockDeviceMappings:
        - DeviceName: "/dev/sdf"
          Ebs:
            VolumeSize: !Ref FlumeDiskSize
            VolumeType: gp2
            # Iops: !GetAtt VolumeIOPS.Value
            # SnapshotId: !Ref SnapshotId

        UserData:
          "Fn::Base64":
            "Fn::Sub":
              - |
                #!/bin/bash -xe
                if [ "$(arch)" == "x86_64" ]
                then
                  ARCH="amd64"
                elif [ "$(arch)" == "aarch64" ]
                then
                  ARCH="arm64"
                fi
                LOGS_BIN="journald-cloudwatch-logs-$ARCH"

                yum install -y jq

                mkdir -p /var/lib/flume

                if [ -e /dev/sdf ]
                then
                  mkfs.ext4 /dev/sdf
                  mount -o barrier=0,data=writeback /dev/sdf /var/lib/flume
                  echo "/dev/sdf  /var/lib/flume    ext4   barrier=0,data=writeback,noatime  1   1" >> /etc/fstab
                fi

                export AWS_DEFAULT_REGION=${AWS::Region}

                # Ignore NVME for now
                # ignore="$(readlink -f /dev/sd*) $(readlink -f /dev/xvd*)"
                # cutignore="$(for x in $ignore ; do echo $x | cut -c -12; done | uniq)"
                # devices="$(ls /dev/nvme* | grep -E 'n1$')"
                # cutdevices="$(for x in $devices ; do echo $x | cut -c -12; done | uniq)"
                # localnvme=$(for d in $cutdevices; do if ! $(echo "$cutignore"| grep -q $d) ; then echo $d; fi ; done)
                # if [ ! -z "$localnvme" ]
                # then
                #   mkfs.ext4 $localnvme
                #   mount -o barrier=0,data=writeback $localnvme /var/lib/flume
                #   echo "$localnvme  /var/lib/flume    ext4   barrier=0,data=writeback,noatime  1   1" >> /etc/fstab
                # fi

                #Copy Down flumeserver
                if ! aws s3 cp s3://${S3ECBucketName}/${S3FlumeBinaryDirectory}/flumeserver /usr/bin/flumeserver
                then
                  if [ "${AggregatedNotifications}" != "" ]
                    then
                    aws sns publish --topic-arn=${AggregatedNotifications} --subject="${AWS::StackName} - CRITICAL Failure to pull binary" --message="Flume failed to pull down the binary for cluster '${AWS::StackName}'. Correct permssions/upload as soon as possible."
                  fi
                  if [ "${AlarmSNSTopic}" != "" ]
                    then
                    aws sns publish --topic-arn=${AlarmSNSTopic} --subject="${AWS::StackName} - CRITICAL Failure to pull binary" --message="Flume failed to pull down the binary for cluster '${AWS::StackName}'. Correct permssions/upload as soon as possible."
                  fi
                  lz4 /var/log/cloud-init-output.log | aws s3 cp - s3://${S3FlumeBackupBucket}/snapshot-logs/${NetworkId}/$(date '+%Y%m%d-%H%M%S').log.lz4 || true
                  poweroff
                fi
                chmod +x /usr/bin/flumeserver

                #copy down the flume backup
                if ! aws s3 cp s3://${S3FlumeBackup} - | lz4  -d - /var/lib/flume/item.sqlite
                then
                  if [ "${AggregatedNotifications}" != "" ]
                    then
                    aws sns publish --topic-arn=${AggregatedNotifications} --subject="${AWS::StackName} - CRITICAL Failure to pull backup" --message="Flume failed to pull down the database backup for cluster '${AWS::StackName}'. Correct permssions/upload as soon as possible."
                  fi
                  if [ "${AlarmSNSTopic}" != "" ]
                    then
                    aws sns publish --topic-arn=${AlarmSNSTopic} --subject="${AWS::StackName} - CRITICAL Failure to pull backup" --message="Flume failed to pull down the database backup for cluster '${AWS::StackName}'. Correct permssions/upload as soon as possible."
                  fi
                  lz4 /var/log/cloud-init-output.log | aws s3 cp - s3://${S3FlumeBackupBucket}/snapshot-logs/${NetworkId}/$(date '+%Y%m%d-%H%M%S').log.lz4 || true
                  poweroff
                fi

                sleep 60

                #Deal with double escapes in url if exist
                printf "/usr/bin/flumeserver -shutdown.sync /var/lib/flume/item.sqlite \"${FlumeSyncEndpoint}\"" > /tmp/flumesync.sh
                chmod +x /tmp/flumesync.sh

                # sync and shutdown
                /tmp/flumesync.sh &
                bg_job=$!
                t=0
                while [ t < 60 -a ps | kill -0 $bg_job ]
                do
                  ((t++))
                  sleep 30
                done
                if kill -0 $bg_job
                then kill -9 $bg_job
                fi
                wait $bg_job

                if [ $? -ne 0 ]
                then
                  if [ "${AggregatedNotifications}" != "" ]
                  then
                    aws sns publish --topic-arn=${AggregatedNotifications} --subject="${AWS::StackName} - Snapshot Failed to Sync" --message="Flume sync failed while taking snapshot for cluster '${AWS::StackName}'. No snapshot will be taken. This is possibly unrecoverable."
                  fi
                  if [ "${AlarmSNSTopic}" != "" ]
                  then
                    aws sns publish --topic-arn=${AlarmSNSTopic} --subject="${AWS::StackName} -  Snapshot Failed to Sync" --message="Flume sync failed while taking snapshot for cluster '${AWS::StackName}'. No snapshot will be taken. This is possibly unrecoverable."
                  fi
                  lz4 /var/log/cloud-init-output.log | aws s3 cp - s3://${S3FlumeBackupBucket}/snapshot-logs/${NetworkId}/$(date '+%Y%m%d-%H%M%S').log.lz4 || true
                  poweroff
                fi

                # upload Backup
                export BACKUPNAME="${S3FlumeBackupBucket}/${NetworkId}/logs-$(date '+%Y%m%d-%H%M%S').sqlite.lz4"
                lz4 /var/lib/flume/item.sqlite | aws s3 cp - s3://$BACKUPNAME --expected-size=175000000000 &
                bg_job=$!
                t=0
                while [ t < 60 -a ps | kill -0 $bg_job ]
                do
                  ((t++))
                  sleep 30
                done
                if kill -0 $bg_job
                then kill -9 $bg_job
                fi
                wait $bg_job

                if [ $? -ne 0 ] ; then
                  if [ "${AggregatedNotifications}" != "" ]
                  then
                    aws sns publish --topic-arn=${AggregatedNotifications} --subject="${AWS::StackName} - Taking Backup Failed" --message="The snapshotting process for ${AWS::StackName} failed to upload the backup."
                  fi
                  if [ "${AlarmSNSTopic}" != "" ]
                  then
                    aws sns publish --topic-arn=${AlarmSNSTopic} --subject="${AWS::StackName} - Taking Backup Failed" --message="The snapshotting process for ${AWS::StackName} failed to upload the backup."
                  fi
                  lz4 /var/log/cloud-init-output.log | aws s3 cp - s3://${S3FlumeBackupBucket}/snapshot-logs/${NetworkId}/$(date '+%Y%m%d-%H%M%S').log.lz4 || true
                  poweroff
                fi

                # CFN will set any parameters we don't provide back to their default values,
                # so get all of the parameters, update S3FlumeBackup, and update the stack with
                # the new parameters.
                PARAMETERS=$(aws cloudformation describe-stacks --stack-name ${AWS::StackName} | jq '.Stacks[0].Parameters | map(if .ParameterKey == "S3FlumeBackup" then .ParameterValue="'$BACKUPNAME'" else . end)' -c)
                aws cloudformation update-stack --stack-name ${AWS::StackName} --use-previous-template --capabilities CAPABILITY_IAM --parameters="$PARAMETERS"

                poweroff
              - ClusterId:
                  "Fn::ImportValue": !Sub "${InfrastructureStack}-ClusterId"

  FlumeSnapshotNodeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - autoscaling.amazonaws.com
        Version: '2012-10-17'
  FlumeSnapshotNodePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref FlumeSnapshotNodeRole
      PolicyName: !Sub "FlumeSnapshotNode${AWS::StackName}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:GetBucketPolicy
              - s3:GetObjectTagging
              - s3:GetBucketLocation
              - s3:PutObject
            Resource: !Sub arn:aws:s3:::${S3FlumeBackupBucket}/*
            Effect: Allow
          - Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:GetBucketPolicy
              - s3:GetObjectTagging
              - s3:GetBucketLocation
            Resource: !Sub arn:aws:s3:::${S3ECBucketName}/*
            Effect: Allow
          - Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:GetBucketPolicy
              - s3:GetObjectTagging
              - s3:GetBucketLocation
            Resource: !Sub arn:aws:s3:::${S3FlumeBackup}
            Effect: Allow
          - Action:
              - cloudformation:UpdateStack
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
            Effect: Allow
          - Action:
              - iam:GetInstanceProfile
            Resource:
              - !Sub ${FlumeNodeInstanceProfile.Arn}
              - !Sub ${FlumeSnapshotNodeInstanceProfile.Arn}
            Effect: Allow
          - Action:
              - lambda:UpdateFunctionConfiguration
              - lambda:GetFunctionConfiguration
            Resource:
              - !Sub ${FlumeSnapshotLambdaFunction.Arn}
            Effect: Allow
          - Action:
              - iam:PassRole
              - iam:GetRole
              - iam:PutRolePolicy
            Resource:
              - !Sub "${FlumeNodeRole.Arn}"
              - !Sub "${FlumeSnapshotLambdaRole.Arn}"
              - !Sub "${FlumeSnapshotNodeRole.Arn}"
            Effect: Allow
          - Action:
              - sns:Publish
            Resource:
              - !Ref AggregatedNotifications
              - !If [ HasSNSTopic, !Ref AlarmSNSTopic,  !Ref 'AWS::NoValue']
            Effect: Allow
          - Action:
              - autoscaling:EnableMetricsCollection
              - autoscaling:DisableMetricsCollection
              - autoscaling:UpdateAutoScalingGroup
            Resource:
              - "*"
            Condition:
              StringEquals:
                "autoscaling:ResourceTag/aws:cloudformation:stack-id": !Sub "${AWS::StackId}"
            Effect: Allow
          - Action:
              - cloudformation:DescribeStacks
              - ec2:DescribeLaunchTemplates
              - ec2:DescribeSnapshotAttribute
              - ec2:CreateTags
              - ec2:DescribeLaunchTemplateVersions
              - ec2:RunInstances
              - ec2:DescribeSnapshots
              - ec2:CreateLaunchTemplateVersion
              - ec2:DescribeVolumeStatus
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeScalingActivities
              - ec2:DescribeVolumes
              - ec2:CreateSnapshot
              - ec2:DeleteSnapshot
              - events:DescribeRule
              - ec2:DescribeKeyPairs
            Resource: "*"
            Effect: Allow
  FlumeSnapshotNodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
      - !Ref FlumeSnapshotNodeRole
    DependsOn: FlumeSnapshotNodeRole
  FlumeSnapshotLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
  FlumeSnapshotLambdaPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref FlumeSnapshotLambdaRole
      PolicyName: !Sub "FlumeSnapshotLambdaPolicy${AWS::StackName}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !Sub "${FlumeSnapshotNodeRole.Arn}"
          - Effect: Allow
            Action:
              - ec2:CreateTags
              - ec2:RunInstances
            Resource:
              - Fn::Sub:
                - "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PublicA}"
                - PublicA:
                    "Fn::ImportValue":
                      !Sub "${InfrastructureStack}-PublicA"
              - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/${KeyName}"
              - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"

              - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*"
              - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${FlumeNodeSecurityGroup.GroupId}"
              - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
              - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:launch-template/${FlumeSnapshotLaunchTemplate}"
              - "arn:aws:ec2:*::image/*"
  FlumeSnapshotLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3ECBucketName
        S3Key: lambdaPackage-17.zip
      Description: "Launch instances to snapshot chaindata"
      Environment:
        Variables:
          LAUNCH_TEMPLATE_ID: !Ref FlumeSnapshotLaunchTemplate
          LAUNCH_TEMPLATE_VERSION: !Sub "${FlumeSnapshotLaunchTemplate.LatestVersionNumber}"
          SUBNET_ID:
            "Fn::ImportValue":
                !Sub "${InfrastructureStack}-PublicA"
          VOLUME_SIZE: !Ref FlumeDiskSize
      Handler: "getSnapshot.handler"
      Role: !Sub ${FlumeSnapshotLambdaRole.Arn}
      Runtime: python3.7
  SnapshotSchedulerRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "Take a daily snapshot for the ${AWS::StackName} cluster"
      ScheduleExpression: !Ref FlumeSnapshotScheduleExpression
      Targets:
        - Arn: !Sub ${FlumeSnapshotLambdaFunction.Arn}
          Id: !Sub "snapshot-${AWS::StackName}"
  FlumeSnapshotInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub ${FlumeSnapshotLambdaFunction.Arn}
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !Sub ${SnapshotSchedulerRule.Arn}


  FlumeLogMetricsFunctionLG:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref FlumeLogMetricsFunction]]

  LogMetricsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
  LogMetricsFunctionPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref LogMetricsRole
      PolicyName: !Sub "FlumeLogMetrics${AWS::StackName}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"
          - Effect: Allow
            Action:
              - "cloudwatch:PutMetricData"
            Resource: "*"
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
  FlumeLogMetricsFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3ECBucketName
        S3Key: flumeLambdaPackage-1.zip
      Description: "A lambda function to process Geth logs into metrics"
      Environment:
        Variables:
          CLUSTER_ID: !Sub ${NetworkId}
      Handler: "logMonitor.flumeHandler"
      Role: !Sub ${LogMetricsRole.Arn}
      Runtime: python3.7
  FlumeLogMetricsSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub ${FlumeLogMetricsFunction.Arn}
      FilterPattern: '{$.systemdUnit = "flume.service"}'
      LogGroupName: !Ref FlumeLG
  FlumeLogMetricFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub ${FlumeLogMetricsFunction.Arn}
      Action: 'lambda:InvokeFunction'
      Principal: !Sub logs.${AWS::Region}.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub ${FlumeLG.Arn}

  # TODO
  # SnapshotGCLambdaRole:
  #   Type: "AWS::IAM::Role"
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #       - Action:
  #         - sts:AssumeRole
  #         Effect: Allow
  #         Principal:
  #           Service:
  #           - lambda.amazonaws.com
  #       Version: '2012-10-17'
  # SnapshotGCLambdaPolicy:
  #   Type: "AWS::IAM::Policy"
  #   Properties:
  #     Roles:
  #       - !Ref SnapshotGCLambdaRole
  #     PolicyName: !Sub "SnapshotGCLambdaPolicy${AWS::StackName}"
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - ec2:DescribeSnapshots
  #             - ec2:DeleteSnapshot
  #           Resource: "*"
  # SnapshotGCLambdaFunction:
  #   Type: "AWS::Lambda::Function"
  #   Properties:
  #     Code:
  #       S3Bucket: !Ref S3ECBucketName
  #       S3Key: lambdaPackage-17.zip
  #     Description: "Cleanup old chaindata snapshots"
  #     Environment:
  #       Variables:
  #         CLUSTER_ID: PLACEHOLDER #TODO
  #     Handler: "gcSnapshot.handler"
  #     Role: !Sub ${SnapshotGCLambdaRole.Arn}
  #     Runtime: python3.7
  # SnapshotGCSchedulerRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Description: !Sub "Cleanup old snapshots for the the ${AWS::StackName} cluster"
  #     ScheduleExpression: "rate(1 hour)"
  #     Targets:
  #       - Arn: !Sub ${SnapshotGCLambdaFunction.Arn}
  #         Id: !Sub "gc-${AWS::StackName}"
  # SnapshotGCInvokePermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Sub ${SnapshotGCLambdaFunction.Arn}
  #     Action: 'lambda:InvokeFunction'
  #     Principal: events.amazonaws.com
  #     SourceArn: !Sub ${SnapshotGCSchedulerRule.Arn}

  CloudwatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${AWS::StackName}"
      DashboardBody:
        Fn::Sub:
          - |
              {
                "widgets": [
                    {
                        "type": "metric",
                        "x": 0,
                        "y": 6,
                        "width": 6,
                        "height": 6,
                        "properties": {
                            "view": "timeSeries",
                            "stacked": false,
                            "metrics": [
                                [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "${FlumeAutoScalingGroup}", { "stat": "Average", "label": "Flumes (avg)" } ],
                                [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "${FlumeAutoScalingGroup}", { "stat": "Maximum", "label": "Flumes (max)" } ]
                            ],
                            "region": "${AWS::Region}",
                            "title": "CPU Utilization"
                        }
                    },
                    {
                        "type": "metric",
                        "x": 6,
                        "y": 6,
                        "width": 6,
                        "height": 6,
                        "properties": {
                            "view": "timeSeries",
                            "stacked": false,
                            "metrics": [
                                [ "CWAgent", "disk_used_percent", "path", "/var/lib/flume", "AutoScalingGroupName", "${FlumeAutoScalingGroup}", "device", "nvme1n1", "fstype", "ext4" ]
                            ],
                            "region": "${AWS::Region}",
                            "title": "Disk Usage"
                        }
                    },
                    {
                        "type": "metric",
                        "x": 12,
                        "y": 6,
                        "width": 6,
                        "height": 6,
                        "properties": {
                            "view": "timeSeries",
                            "stacked": false,
                            "metrics": [
                                [ "CWAgent", "mem_used_percent", "AutoScalingGroupName", "${FlumeAutoScalingGroup}" , { "stat": "Average", "label": "Flumes (avg)" } ],
                                [ "CWAgent", "mem_used_percent", "AutoScalingGroupName", "${FlumeAutoScalingGroup}" , { "stat": "Maximum", "label": "Flumes (max)" } ]
                            ],
                            "region": "${AWS::Region}",
                            "title": "Memory Utilization"
                        }
                    }
                ]
              }
          - ClusterId:
              "Fn::ImportValue": !Sub "${InfrastructureStack}-ClusterId"
